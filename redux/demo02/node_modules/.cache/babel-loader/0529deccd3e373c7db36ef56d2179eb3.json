{"ast":null,"code":"var _jsxFileName = \"D:\\\\demo\\\\demo02\\\\src\\\\TodoList.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; //引入连接器\n\nimport store from './store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = store.getState();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.props.inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"\\u63D0\\u4EA4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"JSPang\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this);\n  }\n\n} // 映射关系就是把原来的state映射成组件中的props属性\n\n\nconst stateToProps = state => {\n  return {\n    inputValue: state.inputValue\n  };\n};\n\nexport default connect(stateToProps, null)(TodoList);","map":{"version":3,"sources":["D:/demo/demo02/src/TodoList.js"],"names":["React","Component","connect","store","TodoList","constructor","props","state","getState","render","inputValue","stateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAAqC;;AACrC,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAC/BI,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAaJ,KAAK,CAACK,QAAN,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA,gCAEE;AAAO,UAAA,KAAK,EAAE,KAAKH,KAAL,CAAWI;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AAnB8B,C,CAsBjC;;;AACA,MAAMC,YAAY,GAAIJ,KAAD,IAAS;AAC5B,SAAO;AACHG,IAAAA,UAAU,EAAGH,KAAK,CAACG;AADhB,GAAP;AAGD,CAJD;;AAMA,eAAeR,OAAO,CAACS,YAAD,EAAc,IAAd,CAAP,CAA2BP,QAA3B,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux'  //引入连接器\nimport store from './store';\n\nclass TodoList extends Component {\n  constructor(props){\n    super(props)\n    this.state = store.getState()\n  }\n\n  render() { \n    return ( \n      <div>\n        <div>\n          {/* 把<input>里的state标签，改为props */}\n          <input value={this.props.inputValue} />\n          <button>提交</button>\n        </div>\n        <ul>\n            <li>JSPang</li>\n        </ul>\n      </div> \n    );\n  }\n}\n\n// 映射关系就是把原来的state映射成组件中的props属性\nconst stateToProps = (state)=>{\n  return {\n      inputValue : state.inputValue\n  }\n}\n\nexport default connect(stateToProps,null)(TodoList);"]},"metadata":{},"sourceType":"module"}