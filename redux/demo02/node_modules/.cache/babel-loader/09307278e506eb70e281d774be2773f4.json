{"ast":null,"code":"var _jsxFileName = \"D:\\\\demo\\\\demo02\\\\src\\\\TodoList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux'; //引入连接器\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoList = props => {\n  let {\n    inputValue,\n    inputChange,\n    clickButton,\n    list\n  } = props; // 粘贴过来后，此处要进行修改\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: inputValue,\n        onChange: inputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clickButton,\n        children: \"\\u63D0\\u4EA4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 27\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}; // 映射关系就是把原来的state映射成组件中的props属性\n\n\n_c = TodoList;\n\nconst stateToProps = state => {\n  return {\n    inputValue: state.inputValue,\n    list: state.list\n  };\n}; // 通过这个参数才可以改变store中的值\n\n\nconst dispatchToProps = dispatch => {\n  return {\n    inputChange(e) {\n      let action = {\n        type: 'change_input',\n        value: e.target.value\n      };\n      dispatch(action);\n    },\n\n    clickButton() {\n      let action = {\n        type: 'add_item'\n      };\n      dispatch(action);\n    }\n\n  };\n};\n\nexport default connect(stateToProps, dispatchToProps)(TodoList);\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["D:/demo/demo02/src/TodoList.js"],"names":["React","connect","TodoList","props","inputValue","inputChange","clickButton","list","map","item","index","stateToProps","state","dispatchToProps","dispatch","e","action","type","value","target"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAAqC;;;;AAErC,MAAMC,QAAQ,GAAIC,KAAD,IAAS;AACxB,MAAI;AAACC,IAAAA,UAAD;AAAaC,IAAAA,WAAb;AAAyBC,IAAAA,WAAzB;AAAqCC,IAAAA;AAArC,MAA6CJ,KAAjD,CADwB,CACgC;;AACxD,sBACE;AAAA,4BACE;AAAA,8BACI;AAAO,QAAA,KAAK,EAAEC,UAAd;AAA0B,QAAA,QAAQ,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAA,gBAEQC,IAAI,CAACC,GAAL,CAAS,CAACC,IAAD,EAAMC,KAAN,KAAc;AACnB,4BAAQ;AAAA,oBAAiBD;AAAjB,WAASC,KAAT;AAAA;AAAA;AAAA;AAAA,gBAAR;AACH,OAFD;AAFR;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAjBD,C,CAmBA;;;KAnBMR,Q;;AAoBN,MAAMS,YAAY,GAAIC,KAAD,IAAS;AAC5B,SAAO;AACHR,IAAAA,UAAU,EAAGQ,KAAK,CAACR,UADhB;AAEHG,IAAAA,IAAI,EAAEK,KAAK,CAACL;AAFT,GAAP;AAID,CALD,C,CAOA;;;AACA,MAAMM,eAAe,GAAIC,QAAD,IAAa;AACnC,SAAO;AACLT,IAAAA,WAAW,CAACU,CAAD,EAAG;AACZ,UAAIC,MAAM,GAAG;AACXC,QAAAA,IAAI,EAAE,cADK;AAEXC,QAAAA,KAAK,EAAEH,CAAC,CAACI,MAAF,CAASD;AAFL,OAAb;AAIAJ,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACD,KAPI;;AAQLV,IAAAA,WAAW,GAAE;AACX,UAAIU,MAAM,GAAG;AACXC,QAAAA,IAAI,EAAE;AADK,OAAb;AAGAH,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACD;;AAbI,GAAP;AAeD,CAhBD;;AAkBA,eAAef,OAAO,CAACU,YAAD,EAAeE,eAAf,CAAP,CAAuCX,QAAvC,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux'  //引入连接器\n\nconst TodoList = (props)=>{\n  let {inputValue ,inputChange,clickButton,list} = props; // 粘贴过来后，此处要进行修改\n  return (\n    <div>\n      <div>\n          <input value={inputValue} onChange={inputChange} />\n          <button onClick={clickButton}>提交</button>\n      </div>\n      <ul>\n          {\n              list.map((item,index)=>{\n                  return (<li key={index}>{item}</li>)\n              })\n          }\n      </ul>\n    </div>\n  );\n}\n\n// 映射关系就是把原来的state映射成组件中的props属性\nconst stateToProps = (state)=>{\n  return {\n      inputValue : state.inputValue,\n      list: state.list\n  }\n}\n\n// 通过这个参数才可以改变store中的值\nconst dispatchToProps = (dispatch) =>{\n  return {\n    inputChange(e){\n      let action = {\n        type: 'change_input',\n        value: e.target.value\n      }\n      dispatch(action);\n    },\n    clickButton(){\n      let action = {\n        type: 'add_item',\n      }\n      dispatch(action);\n    }\n  }\n}\n\nexport default connect(stateToProps, dispatchToProps)(TodoList);"]},"metadata":{},"sourceType":"module"}