{"ast":null,"code":"var _jsxFileName = \"D:\\\\demo\\\\demo02\\\\src\\\\TodoList.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux'; //引入连接器\n\nimport store from './store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = store.getState();\n  }\n\n  render() {\n    let {\n      inputValue,\n      inputChange,\n      clickButton,\n      list\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: inputValue,\n          onChange: inputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clickButton,\n          children: \"\\u63D0\\u4EA4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: list.map((item, key) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: item\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n\n} // 映射关系就是把原来的state映射成组件中的props属性\n\n\nconst stateToProps = state => {\n  return {\n    inputValue: state.inputValue,\n    list: state.list\n  };\n}; // 通过这个参数才可以改变store中的值\n\n\nconst dispatchToProps = dispatch => {\n  return {\n    inputChange(e) {\n      let action = {\n        type: 'change_input',\n        value: e.target.value\n      };\n      dispatch(action);\n    },\n\n    clickButton() {\n      let action = {\n        type: 'add_item'\n      };\n      dispatch(action);\n    }\n\n  };\n};\n\nexport default connect(stateToProps, dispatchToProps)(TodoList);","map":{"version":3,"sources":["D:/demo/demo02/src/TodoList.js"],"names":["React","Component","connect","store","TodoList","constructor","props","state","getState","render","inputValue","inputChange","clickButton","list","map","item","key","stateToProps","dispatchToProps","dispatch","e","action","type","value","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CAAqC;;AACrC,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAC/BI,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAaJ,KAAK,CAACK,QAAN,EAAb;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,QAAI;AAACC,MAAAA,UAAD;AAAaC,MAAAA,WAAb;AAAyBC,MAAAA,WAAzB;AAAqCC,MAAAA;AAArC,QAA6C,KAAKP,KAAtD;AACA,wBACE;AAAA,8BACE;AAAA,gCAEE;AAAO,UAAA,KAAK,EAAEI,UAAd;AAA0B,UAAA,QAAQ,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAQ,UAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAA,kBAEMC,IAAI,CAACC,GAAL,CAAS,CAACC,IAAD,EAAOC,GAAP,KAAe;AACtB,8BAAQ;AAAA,sBAAeD;AAAf,aAASC,GAAT;AAAA;AAAA;AAAA;AAAA,kBAAR;AACD,SAFD;AAFN;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAxB8B,C,CA2BjC;;;AACA,MAAMC,YAAY,GAAIV,KAAD,IAAS;AAC5B,SAAO;AACHG,IAAAA,UAAU,EAAGH,KAAK,CAACG,UADhB;AAEHG,IAAAA,IAAI,EAAEN,KAAK,CAACM;AAFT,GAAP;AAID,CALD,C,CAOA;;;AACA,MAAMK,eAAe,GAAIC,QAAD,IAAa;AACnC,SAAO;AACLR,IAAAA,WAAW,CAACS,CAAD,EAAG;AACZ,UAAIC,MAAM,GAAG;AACXC,QAAAA,IAAI,EAAE,cADK;AAEXC,QAAAA,KAAK,EAAEH,CAAC,CAACI,MAAF,CAASD;AAFL,OAAb;AAIAJ,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACD,KAPI;;AAQLT,IAAAA,WAAW,GAAE;AACX,UAAIS,MAAM,GAAG;AACXC,QAAAA,IAAI,EAAE;AADK,OAAb;AAGAH,MAAAA,QAAQ,CAACE,MAAD,CAAR;AACD;;AAbI,GAAP;AAeD,CAhBD;;AAkBA,eAAenB,OAAO,CAACe,YAAD,EAAeC,eAAf,CAAP,CAAuCd,QAAvC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux'  //引入连接器\nimport store from './store';\n\nclass TodoList extends Component {\n  constructor(props){\n    super(props)\n    this.state = store.getState()\n  }\n\n  render() { \n    let {inputValue ,inputChange,clickButton,list} = this.props;\n    return ( \n      <div>\n        <div>\n          {/* 把<input>里的state标签，改为props */}\n          <input value={inputValue} onChange={inputChange}/>\n          <button onClick={clickButton}>提交</button>\n        </div>\n        <ul>\n            {\n              list.map((item, key) => {\n                return (<li key={key}>{item}</li>)\n              })\n            }\n        </ul>\n      </div> \n    );\n  }\n}\n\n// 映射关系就是把原来的state映射成组件中的props属性\nconst stateToProps = (state)=>{\n  return {\n      inputValue : state.inputValue,\n      list: state.list\n  }\n}\n\n// 通过这个参数才可以改变store中的值\nconst dispatchToProps = (dispatch) =>{\n  return {\n    inputChange(e){\n      let action = {\n        type: 'change_input',\n        value: e.target.value\n      }\n      dispatch(action);\n    },\n    clickButton(){\n      let action = {\n        type: 'add_item',\n      }\n      dispatch(action);\n    }\n  }\n}\n\nexport default connect(stateToProps, dispatchToProps)(TodoList);"]},"metadata":{},"sourceType":"module"}