{"ast":null,"code":"import { createStore, applyMiddleware, compose } from 'redux'; // 引入createStore方法\n\nimport reducer from './reducer';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga'; //引入saga\n\nimport mySagas from './sagas'; // ————————————————————————————————————————————————————————————————————————————\n\n/**\n * 配置redux-thunk的方法\n */\n// 加了这句话的意思就是看window里有没有这个方法，有则执行这个方法\n// 利用compose创建了一个增强函数\n// const composeEnhancers =   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}):compose;\n// const enhancer = composeEnhancers(applyMiddleware(thunk));\n// ————————————————————————————————————————————————————————————————————————————\n\n/**\n * 配置redux-saga的方法\n */\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\nconst sagaMiddleware = createSagaMiddleware(); //创建saga中间件\n\nconst enhancer = composeEnhancers(applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(mySagas); // ————————————————————————————————————————————————————————————————————————————\n// 这里声明了一个store，之后整个应用都在使用这个store\n\nconst store = createStore(reducer, enhancer); // 创建数据存储仓库\n\nsagaMiddleware.run(mySagas);\nexport default store; //暴露出去\n\n/**\n * store必须是唯一的，多个store是坚决不允许的，只能有一个store空间\n * 只有store能改变自己的内容，Reducer不能改变\n * Reducer必须是纯函数\n *  纯函数：如果函数的调用参数相同，则永远返回相同的结果，它不依赖于程序执行期间函数外部\n *          任何状态或数据的变化，必须只依赖于其输入参数\n */","map":{"version":3,"sources":["D:/demo/demo01/src/store/index.js"],"names":["createStore","applyMiddleware","compose","reducer","thunk","createSagaMiddleware","mySagas","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","sagaMiddleware","enhancer","run","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD,C,CAAgE;;AAChE,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CAAgD;;AAChD,OAAOC,OAAP,MAAoB,SAApB,C,CAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAKC,MAAM,CAACC,oCAAP,GACvBD,MAAM,CAACC,oCAAP,CAA4C,EAA5C,CADuB,GACyBP,OADpD;AAEA,MAAMQ,cAAc,GAAGL,oBAAoB,EAA3C,C,CAAiD;;AACjD,MAAMM,QAAQ,GAAGJ,gBAAgB,CAACN,eAAe,CAACS,cAAD,CAAhB,CAAjC;AACAA,cAAc,CAACE,GAAf,CAAmBN,OAAnB,E,CAEA;AAEA;;AACA,MAAMO,KAAK,GAAGb,WAAW,CAAEG,OAAF,EAAWQ,QAAX,CAAzB,C,CAA8C;;AAE9CD,cAAc,CAACE,GAAf,CAAmBN,OAAnB;AACA,eAAeO,KAAf,C,CAA8C;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';  // 引入createStore方法\nimport reducer from './reducer';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga'   //引入saga\nimport mySagas from './sagas';\n\n// ————————————————————————————————————————————————————————————————————————————\n/**\n * 配置redux-thunk的方法\n */\n// 加了这句话的意思就是看window里有没有这个方法，有则执行这个方法\n// 利用compose创建了一个增强函数\n// const composeEnhancers =   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}):compose;\n\n// const enhancer = composeEnhancers(applyMiddleware(thunk));\n\n// ————————————————————————————————————————————————————————————————————————————\n/**\n * 配置redux-saga的方法\n */\nconst composeEnhancers =   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}):compose;\nconst sagaMiddleware = createSagaMiddleware();   //创建saga中间件\nconst enhancer = composeEnhancers(applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(mySagas);\n\n// ————————————————————————————————————————————————————————————————————————————\n\n// 这里声明了一个store，之后整个应用都在使用这个store\nconst store = createStore( reducer, enhancer) // 创建数据存储仓库\n\nsagaMiddleware.run(mySagas);\nexport default store;                         //暴露出去\n\n/**\n * store必须是唯一的，多个store是坚决不允许的，只能有一个store空间\n * 只有store能改变自己的内容，Reducer不能改变\n * Reducer必须是纯函数\n *  纯函数：如果函数的调用参数相同，则永远返回相同的结果，它不依赖于程序执行期间函数外部\n *          任何状态或数据的变化，必须只依赖于其输入参数\n */"]},"metadata":{},"sourceType":"module"}