{"ast":null,"code":"var _jsxFileName = \"D:\\\\demo\\\\demo01\\\\src\\\\TodoListUI.js\";\nimport React from 'react';\nimport { Input, Button, List } from 'antd';\n/**\n * 采用无状态组件代码，效率要高于之前写的普通react组件\n * 就是使用函数的效率要高于类\n * 如果能做成无状态组件就尽量做成无状态组件，性能要高很多\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TodoListUi = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        placeholder: props.inputValue,\n        style: {\n          width: '250px'\n        },\n        onChange: props.changeInputValue,\n        value: props.inputValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: props.clickBtn,\n        children: \"\\u589E\\u52A0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '10px',\n        width: '300px'\n      },\n      children: /*#__PURE__*/_jsxDEV(List, {\n        bordered: true,\n        dataSource: props.list,\n        renderItem: (item, index) => /*#__PURE__*/_jsxDEV(List.Item, {\n          onClick: () => {\n            props.deleteItem(index);\n          },\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TodoListUi;\nexport default TodoListUi;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoListUi\");","map":{"version":3,"sources":["D:/demo/demo01/src/TodoListUI.js"],"names":["React","Input","Button","List","TodoListUi","props","margin","inputValue","width","changeInputValue","clickBtn","list","item","index","deleteItem"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAiBC,MAAjB,EAA0BC,IAA1B,QAAsC,MAAtC;AAEA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,sBACE;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAZ;AAAA,4BACE;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,WAAW,EAAED,KAAK,CAACE,UADrB;AAEE,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFT;AAGE,QAAA,QAAQ,EAAEH,KAAK,CAACI,gBAHlB;AAIE,QAAA,KAAK,EAAEJ,KAAK,CAACE;AAJf;AAAA;AAAA;AAAA;AAAA,cADF,eAOE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,OAAO,EAAEF,KAAK,CAACK,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAK,MAAA,KAAK,EAAE;AAACJ,QAAAA,MAAM,EAAC,MAAR;AAAgBE,QAAAA,KAAK,EAAC;AAAtB,OAAZ;AAAA,6BAGE,QAAC,IAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,UAAU,EAAEH,KAAK,CAACM,IAFpB;AAGE,QAAA,UAAU,EAAE,CAACC,IAAD,EAAOC,KAAP,kBAAkB,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,OAAO,EAAE,MAAM;AAACR,YAAAA,KAAK,CAACS,UAAN,CAAiBD,KAAjB;AAAwB,WAAnD;AAAA,oBAAsDD;AAAtD;AAAA;AAAA;AAAA;AAAA;AAHhC;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAvBD;;KAAMR,U;AAyBN,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport { Input , Button , List } from 'antd';\n\n/**\n * 采用无状态组件代码，效率要高于之前写的普通react组件\n * 就是使用函数的效率要高于类\n * 如果能做成无状态组件就尽量做成无状态组件，性能要高很多\n */\nconst TodoListUi = (props) => {\n  return ( \n    <div style={{margin: '10px'}}>\n      <div>\n        <Input \n          placeholder={props.inputValue} \n          style={{ width: '250px' }} \n          onChange={props.changeInputValue}\n          value={props.inputValue}\n        />\n        <Button type='primary' onClick={props.clickBtn}>增加</Button>\n      </div>\n      <div style={{margin:'10px', width:'300px'}}>\n        {/* 如果不想立即执行，还想绑定函数，可以使用下面\n        <List.Item onClick={this.props.deleteItem.bind(this, index)}>{item}</List.Item> */}\n        <List\n          bordered\n          dataSource={props.list} \n          renderItem={(item, index) => (<List.Item onClick={() => {props.deleteItem(index)}}>{item}</List.Item>)}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TodoListUi;\n"]},"metadata":{},"sourceType":"module"}